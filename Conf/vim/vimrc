"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ███████╗ ██████╗██╗  ██╗███████╗ ██████╗████████╗███████╗██████╗ ███████╗
" ██╔════╝██╔════╝██║  ██║██╔════╝██╔════╝╚══██╔══╝██╔════╝██╔══██╗██╔════╝
" ███████╗██║     ███████║█████╗  ██║        ██║   █████╗  ██████╔╝███████╗
" ╚════██║██║     ██╔══██║██╔══╝  ██║        ██║   ██╔══╝  ██╔══██╗╚════██║
" ███████║╚██████╗██║  ██║███████╗╚██████╗   ██║   ███████╗██║  ██║███████║
" ╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝ ╚═════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝
"
"                 ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"                 ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"                 ██║   ██║██║██╔████╔██║██████╔╝██║
"                 ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"                  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"                   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
"Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
"Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"Plug '~/my-prototype-plugin'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.

" My plugins
Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'aserebryakov/vim-todo-lists'
Plug 'dense-analysis/ale'
Plug 'elzr/vim-json'
Plug 'honza/vim-snippets'
Plug 'jiangmiao/auto-pairs'
Plug 'kien/ctrlp.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/DoxygenToolkit.vim' " TODO Replace with snippets
Plug 'vim-scripts/a.vim'

call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" ------------------------------------------------------
" ------------------ Plugin settings ------------------
" ------------------------------------------------------
" vim-commentary settings
autocmd FileType *.ino setlocal commentstring=//\ %s

" ALE config
let g:ale_completion_enabled = 0 "Disable auto code complete, I have other plugins for that
let g:ale_linters_ignore = {'cpp': ['cc', 'clangcheck', 'clangd', 'clangtidy']} "I already have coc-clangd running

" ctrlp config
let g:ctrlp_working_path_mode = ''

" Doxygen Toolkit
let g:DoxygenToolkit_briefTag_pre = ''

" ------------------------------------------------------
" -------------- My Preference Settings ----------------
" ------------------------------------------------------
" My settings
set nocompatible
set showmatch
set ignorecase
set smartcase
set incsearch
set nowrap
set smartindent
set expandtab
set smarttab
set autoindent
set tabstop=4
set shiftwidth=4
set hlsearch
set number
set clipboard=unnamedplus
set scrolloff=10
set signcolumn=yes
set updatetime=300

syntax on
autocmd Filetype ino,c,cpp set cindent

" Make vim treat arduino file types as cpp types
au BufRead,BufNewFile *.ino set filetype=cpp

" My commands
:command W w
:command Q q
:command Wq wq
:command WQ wq
:command SC SyntasticCheck clear

" My remaps
nnoremap <C-S-j> <C-d>
nnoremap <C-S-k> <C-u>
nnoremap <C-S-h> ^
nnoremap <C-S-l> $

" Use 'j' and 'k' for dropdown selection
"inoremap <expr> j pumvisible() ? "\<C-N>" : "j"
"inoremap <expr> k pumvisible() ? "\<C-P>" : "k"

source $HOME/.vimrc_project

" ------------------------------------------------------
" -------------------- COC Settings --------------------
" ------------------------------------------------------
" Recolors
hi CocFloating ctermbg=black

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" coc-snippets
" Use <C-l> for trigger snippet expand.
"imap <C-n> <Plug>(coc-snippets-expand)
" Use <C-j> for select text for visual placeholder of snippet.
"vmap <C-m> <Plug>(coc-snippets-select)
" Use <C-j> for jump to next placeholder, it's default of coc.nvim
"let g:coc_snippet_next = '<c-j>'
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
"let g:coc_snippet_prev = '<c-k>'
" Use <C-j> for both expand and jump (make expand higher priority.)
"imap <C-j> <Plug>(coc-snippets-expand-jump)
" Use <leader>x for convert visual selected code to snippet
"xmap <leader>x  <Plug>(coc-convert-snippet)

" coc-spell-checker
vmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

